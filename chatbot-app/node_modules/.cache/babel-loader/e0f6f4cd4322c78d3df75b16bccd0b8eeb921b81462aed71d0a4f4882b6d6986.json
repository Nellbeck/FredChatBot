{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const allPredefinedQuestions = useMemo(() => [\"Who are you?\", \"What can you do?\", \"Tell me a joke!\", \"Where do you live?\", \"How can I contact you?\", \"What is your favorite book?\", \"Have you worked on any cool projects?\", \"What are your hobbies?\", \"Tell me a fun fact!\", \"How would you describe yourself?\", \"How does your CV look like?\"], []);\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\n  const [, setAskedQuestions] = useState([]);\n  const [badges, setBadges] = useState([]);\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\n\n  // Ref for auto-scrolling\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom whenever messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const getRandomQuestions = useCallback(excludedQuestions => {\n    const availableQuestions = allPredefinedQuestions.filter(q => !excludedQuestions.includes(q));\n    const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n  }, [allPredefinedQuestions]);\n  useEffect(() => {\n    setPredefinedQuestions(getRandomQuestions([]));\n  }, [getRandomQuestions]);\n  const sendMessage = async messageText => {\n    if (!messageText.trim() || isTyping) return;\n    setIsTyping(true); // Disable input until bot finishes responding\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: messageText\n    }]);\n    setInput(\"\");\n\n    // Check if message contains \"?\" to count it as a question\n    if (messageText.includes(\"?\")) {\n      setAskedQuestions(prev => {\n        const newAsked = [...prev, messageText];\n        setPredefinedQuestions(getRandomQuestions(newAsked));\n        checkAchievements(newAsked.length);\n        return newAsked;\n      });\n    }\n    try {\n      var _response$data, _response$data$answer;\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if (typeof response.data === \"string\") {\n        botResponse = response.data;\n      } else if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$answer = _response$data.answers) === null || _response$data$answer === void 0 ? void 0 : _response$data$answer.length) > 0) {\n        botResponse = response.data.answers[0].answer;\n      }\n      await typeOutMessage(botResponse);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      await typeOutMessage(\"Sorry, something went wrong.\");\n    }\n    setIsTyping(false); // Re-enable input after bot response\n  };\n  const typeOutMessage = fullMessage => {\n    return new Promise(resolve => {\n      let currentText = \"\";\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < fullMessage.length) {\n          currentText += fullMessage[index];\n          setMessages(prev => {\n            const newMessages = [...prev];\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n              newMessages[newMessages.length - 1].text = currentText;\n            } else {\n              newMessages.push({\n                sender: \"bot\",\n                text: currentText\n              });\n            }\n            return newMessages;\n          });\n          index++;\n        } else {\n          clearInterval(interval);\n          resolve(); // Resolve when typing is complete\n        }\n      }, 25);\n    });\n  };\n  const checkAchievements = questionCount => {\n    const newBadges = [];\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-questions\",\n        children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(question),\n          className: \"question-button\",\n          disabled: isTyping,\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-container ${msg.sender}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.sender}`,\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === \"Enter\" && sendMessage(input),\n          placeholder: \"Type your message here...\",\n          disabled: isTyping // Disable input while typing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(input),\n          disabled: isTyping,\n          children: isTyping ? \"Typing...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"achievement-tracker\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Achievements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No achievements yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 32\n      }, this) : badges.map((badge, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge\",\n        children: [\"\\uD83C\\uDFC6 \", badge]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"2e1XWkjpcGuzdatxEPcbTcXTlJM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","allPredefinedQuestions","messages","setMessages","sender","text","input","setInput","predefinedQuestions","setPredefinedQuestions","setAskedQuestions","badges","setBadges","isTyping","setIsTyping","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","getRandomQuestions","excludedQuestions","availableQuestions","filter","q","includes","shuffled","sort","Math","random","slice","sendMessage","messageText","trim","prev","newAsked","checkAchievements","length","_response$data","_response$data$answer","API_URL","process","env","REACT_APP_API_URL","response","post","question","botResponse","data","answers","answer","typeOutMessage","error","console","fullMessage","Promise","resolve","currentText","index","interval","setInterval","newMessages","push","clearInterval","questionCount","newBadges","className","children","map","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","msg","ref","type","value","onChange","e","target","onKeyPress","key","placeholder","badge","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Import external CSS\r\n\r\nfunction Chatbot() {\r\n  const allPredefinedQuestions = useMemo(\r\n    () => [\r\n      \"Who are you?\",\r\n      \"What can you do?\",\r\n      \"Tell me a joke!\",\r\n      \"Where do you live?\",\r\n      \"How can I contact you?\",\r\n      \"What is your favorite book?\",\r\n      \"Have you worked on any cool projects?\",\r\n      \"What are your hobbies?\",\r\n      \"Tell me a fun fact!\",\r\n      \"How would you describe yourself?\",\r\n      \"How does your CV look like?\"\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\" }\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\r\n  const [, setAskedQuestions] = useState([]);\r\n  const [badges, setBadges] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\r\n\r\n  // Ref for auto-scrolling\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom whenever messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const getRandomQuestions = useCallback(\r\n    (excludedQuestions) => {\r\n      const availableQuestions = allPredefinedQuestions.filter(\r\n        (q) => !excludedQuestions.includes(q)\r\n      );\r\n      const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 3);\r\n    },\r\n    [allPredefinedQuestions]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPredefinedQuestions(getRandomQuestions([]));\r\n  }, [getRandomQuestions]);\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim() || isTyping) return;\r\n\r\n    setIsTyping(true); // Disable input until bot finishes responding\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: messageText }]);\r\n    setInput(\"\");\r\n    \r\n  // Check if message contains \"?\" to count it as a question\r\n  if (messageText.includes(\"?\")) {\r\n    setAskedQuestions((prev) => {\r\n      const newAsked = [...prev, messageText];\r\n      setPredefinedQuestions(getRandomQuestions(newAsked));\r\n      checkAchievements(newAsked.length);\r\n      return newAsked;\r\n    });\r\n  }\r\n\r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\r\n      const response = await axios.post(API_URL, { question: messageText });\r\n\r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n      if (typeof response.data === \"string\") {\r\n        botResponse = response.data;\r\n      } else if (response.data?.answers?.length > 0) {\r\n        botResponse = response.data.answers[0].answer;\r\n      }\r\n\r\n      await typeOutMessage(botResponse);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      await typeOutMessage(\"Sorry, something went wrong.\");\r\n    }\r\n\r\n    setIsTyping(false); // Re-enable input after bot response\r\n  };\r\n\r\n  const typeOutMessage = (fullMessage) => {\r\n    return new Promise((resolve) => {\r\n      let currentText = \"\";\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < fullMessage.length) {\r\n          currentText += fullMessage[index];\r\n          setMessages((prev) => {\r\n            const newMessages = [...prev];\r\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n              newMessages[newMessages.length - 1].text = currentText;\r\n            } else {\r\n              newMessages.push({ sender: \"bot\", text: currentText });\r\n            }\r\n            return newMessages;\r\n          });\r\n          index++;\r\n        } else {\r\n          clearInterval(interval);\r\n          resolve(); // Resolve when typing is complete\r\n        }\r\n      }, 25);\r\n    });\r\n  };\r\n\r\n  const checkAchievements = (questionCount) => {\r\n    const newBadges = [];\r\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\r\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\r\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\r\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-content\">\r\n        <div className=\"predefined-questions\">\r\n          {predefinedQuestions.map((question, index) => (\r\n            <button key={index} onClick={() => sendMessage(question)} className=\"question-button\" disabled={isTyping}>\r\n              {question}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-window\">\r\n          <div className=\"chat-messages\">\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={`message-container ${msg.sender}`}>\r\n                <div className={`message ${msg.sender}`}>{msg.text}</div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} /> {/* Invisible div to scroll to */}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n            placeholder=\"Type your message here...\"\r\n            disabled={isTyping} // Disable input while typing\r\n          />\r\n          <button onClick={() => sendMessage(input)} disabled={isTyping}>\r\n            {isTyping ? \"Typing...\" : \"Send\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"achievement-tracker\">\r\n        <h3>Achievements</h3>\r\n        {badges.length === 0 ? <p>No achievements yet.</p> :\r\n          badges.map((badge, index) => <div key={index} className=\"badge\">🏆 {badge}</div>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}