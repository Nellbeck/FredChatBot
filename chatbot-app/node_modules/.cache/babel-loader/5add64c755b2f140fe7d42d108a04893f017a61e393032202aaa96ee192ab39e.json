{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const predefinedQuestions = [\"Who are you?\", \"What can you do?\", \"Tell me a joke!\", \"Where do you live?\", \"How can I contact you?\"];\n  useEffect(() => {\n    // âœ… Type out the welcome message instead of showing it instantly\n    typeOutMessage(\"Hello and welcome! Feel free to ask anything and I'll an\");\n  }, []);\n  const sendMessage = async messageText => {\n    if (!messageText.trim()) return;\n    const userMessage = {\n      sender: \"user\",\n      text: messageText\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    try {\n      var _response$data, _response$data$answer;\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\n      console.log(\"Sending request to:\", API_URL);\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      console.log(\"Full API Response:\", response);\n      console.log(\"Response Data:\", response.data);\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if (typeof response.data === \"string\") {\n        botResponse = response.data;\n      } else if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$answer = _response$data.answers) === null || _response$data$answer === void 0 ? void 0 : _response$data$answer.length) > 0) {\n        botResponse = response.data.answers[0].answer;\n      } else {\n        console.warn(\"No valid answer found in response.\");\n      }\n      console.log(\"Final Bot Response:\", botResponse);\n      typeOutMessage(botResponse);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      typeOutMessage(\"Sorry, something went wrong.\");\n    }\n  };\n  const typeOutMessage = fullMessage => {\n    let currentText = \"\";\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < fullMessage.length) {\n        currentText += fullMessage[index];\n        setMessages(prev => {\n          const newMessages = [...prev];\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n            newMessages[newMessages.length - 1].text = currentText;\n          } else {\n            newMessages.push({\n              sender: \"bot\",\n              text: currentText\n            });\n          }\n          return newMessages;\n        });\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 50);\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") sendMessage(input);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-questions\",\n      children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(question),\n        className: \"question-button\",\n        children: question\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-container ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(input),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"Z7bPrZHR9DDxNUXxHtFz54hQVxg=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","predefinedQuestions","typeOutMessage","sendMessage","messageText","trim","userMessage","sender","text","prev","_response$data","_response$data$answer","API_URL","process","env","REACT_APP_API_URL","console","log","response","post","question","data","botResponse","answers","length","answer","warn","error","fullMessage","currentText","index","interval","setInterval","newMessages","push","clearInterval","handleKeyPress","e","key","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","type","value","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Import external CSS\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const predefinedQuestions = [\r\n    \"Who are you?\",\r\n    \"What can you do?\",\r\n    \"Tell me a joke!\",\r\n    \"Where do you live?\",\r\n    \"How can I contact you?\",\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // âœ… Type out the welcome message instead of showing it instantly\r\n    typeOutMessage(\"Hello and welcome! Feel free to ask anything and I'll an\");\r\n  }, []);\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    const userMessage = { sender: \"user\", text: messageText };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\r\n      console.log(\"Sending request to:\", API_URL);\r\n\r\n      const response = await axios.post(API_URL, { question: messageText });\r\n\r\n      console.log(\"Full API Response:\", response);\r\n      console.log(\"Response Data:\", response.data);\r\n\r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n\r\n      if (typeof response.data === \"string\") {\r\n        botResponse = response.data;\r\n      } else if (response.data?.answers?.length > 0) {\r\n        botResponse = response.data.answers[0].answer;\r\n      } else {\r\n        console.warn(\"No valid answer found in response.\");\r\n      }\r\n\r\n      console.log(\"Final Bot Response:\", botResponse);\r\n      typeOutMessage(botResponse);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      typeOutMessage(\"Sorry, something went wrong.\");\r\n    }\r\n  };\r\n\r\n  const typeOutMessage = (fullMessage) => {\r\n    let currentText = \"\";\r\n    let index = 0;\r\n\r\n    const interval = setInterval(() => {\r\n      if (index < fullMessage.length) {\r\n        currentText += fullMessage[index];\r\n        setMessages((prev) => {\r\n          const newMessages = [...prev];\r\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n            newMessages[newMessages.length - 1].text = currentText;\r\n          } else {\r\n            newMessages.push({ sender: \"bot\", text: currentText });\r\n          }\r\n          return newMessages;\r\n        });\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") sendMessage(input);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"predefined-questions\">\r\n        {predefinedQuestions.map((question, index) => (\r\n          <button key={index} onClick={() => sendMessage(question)} className=\"question-button\">\r\n            {question}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat-window\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message-container ${msg.sender}`}>\r\n            <div className={`message ${msg.sender}`}>{msg.text}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message here...\"\r\n        />\r\n        <button onClick={() => sendMessage(input)}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}