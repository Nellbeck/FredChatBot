{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const allPredefinedQuestions = useMemo(() => [\"Who are you?\", \"What can you do?\", \"Do you know a joke?\", \"Where do you live?\", \"How can I contact you?\", \"What is your favorite book?\", \"Have you worked on any cool projects?\", \"What are your hobbies?\", \"Do you know any fun fact?\", \"How would you describe yourself?\", \"How does your CV look like?\"], []);\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\"\n  }]);\n  useEffect(() => {\n    typeOutMessage(\"Hello and welcome! See me Fredrik's alter ego. Ask me anything and I'll do my best to answer.\");\n  }, []);\n  const [input, setInput] = useState(\"\");\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\n  const [, setAskedQuestions] = useState([]);\n  const [badges, setBadges] = useState([]);\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\n\n  // Ref for auto-scrolling\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // See if this will make the first request faster.\n  useEffect(() => {\n    console.time(\"API Warm-up Time\");\n    fetch(process.env.REACT_APP_API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question: \"ping\"\n      })\n    }).then(() => console.timeEnd(\"API Warm-up Time\")).catch(() => console.timeEnd(\"API Warm-up Time\")); // Ensure timer stops even if there's an error\n  }, []); // <-- Empty dependency array ensures this runs only once\n\n  // Scroll to bottom whenever messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    if (isTyping) {\n      let dots = [\".\", \"..\", \"...\"];\n      let index = 0;\n      const interval = setInterval(() => {\n        setMessages(prev => {\n          const newMessages = [...prev];\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n            newMessages[newMessages.length - 1].text = dots[index];\n          }\n          return newMessages;\n        });\n        index = (index + 1) % dots.length;\n      }, 500);\n      return () => clearInterval(interval);\n    }\n  }, [isTyping]);\n  const getRandomQuestions = useCallback(excludedQuestions => {\n    const availableQuestions = allPredefinedQuestions.filter(q => !excludedQuestions.includes(q));\n    const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n  }, [allPredefinedQuestions]);\n  useEffect(() => {\n    setPredefinedQuestions(getRandomQuestions([]));\n  }, [getRandomQuestions]);\n  const sendMessage = async messageText => {\n    if (!messageText.trim() || isTyping) return;\n    setIsTyping(true); // Disable input until bot finishes responding\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: messageText\n    }, {\n      sender: \"bot\",\n      text: \".\"\n    }]);\n    setInput(\"\");\n\n    // Check if message contains \"?\" to count it as a question\n    if (messageText.includes(\"?\")) {\n      document.querySelectorAll(\".question-button\").forEach(btn => {\n        if (btn.innerText === messageText) {\n          btn.classList.add(\"fade-out\"); // Apply fade-out effect\n        }\n      });\n      setTimeout(() => {\n        setAskedQuestions(prev => {\n          const newAsked = [...prev, messageText];\n\n          // Clear animation classes before updating questions\n          document.querySelectorAll(\".question-button\").forEach(btn => {\n            btn.classList.remove(\"fade-out\", \"fade-in\");\n          });\n\n          // Update predefined questions after fade-out completes\n          setPredefinedQuestions(getRandomQuestions(newAsked));\n          checkAchievements(newAsked.length);\n          return newAsked;\n        });\n\n        // Delay to ensure new elements are rendered before adding fade-in effect\n        setTimeout(() => {\n          document.querySelectorAll(\".question-button\").forEach(btn => {\n            btn.classList.add(\"fade-in\");\n          });\n        }, 10); // Tiny delay to ensure new buttons exist before adding class\n      }, 500); // Wait 0.5s for fade-out effect\n    }\n    try {\n      var _response$data, _response$data$answer;\n      const API_URL = process.env.REACT_APP_API_URL;\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if (typeof response.data === \"string\") {\n        botResponse = response.data;\n      } else if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$answer = _response$data.answers) === null || _response$data$answer === void 0 ? void 0 : _response$data$answer.length) > 0) {\n        botResponse = response.data.answers[0].answer;\n      }\n      setIsTyping(false); // Re-enable input after bot response\n      await typeOutMessage(botResponse);\n    } catch (error) {\n      setIsTyping(false); // Re-enable input after bot response\n      console.error(\"Error sending message:\", error);\n      await typeOutMessage(\"Sorry, something went wrong.\");\n    }\n\n    // Focus back to input field\n    setTimeout(() => {\n      var _inputRef$current;\n      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    }, 10);\n  };\n  const typeOutMessage = fullMessage => {\n    return new Promise(resolve => {\n      let currentText = \"\";\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < fullMessage.length) {\n          currentText += fullMessage[index];\n          setMessages(prev => {\n            const newMessages = [...prev];\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n              newMessages[newMessages.length - 1].text = currentText;\n            } else {\n              newMessages.push({\n                sender: \"bot\",\n                text: currentText\n              });\n            }\n            return newMessages;\n          });\n          index++;\n        } else {\n          clearInterval(interval);\n          resolve(); // Resolve when typing is complete\n        }\n      }, 25);\n    });\n  };\n  const checkAchievements = questionCount => {\n    const newBadges = [];\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\n  };\n  const formatMessage = text => {\n    return text.split(/(https?:\\/\\/\\S+)/g).map((part, index) => part.match(/https?:\\/\\/\\S+/) ? /*#__PURE__*/_jsxDEV(\"a\", {\n      href: part,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: part\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this) : part);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-questions\",\n        children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(question),\n          className: \"question-button\",\n          disabled: isTyping,\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: [msg.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Fredrik.jpg\",\n              alt: \"Bot Avatar\",\n              className: \"bot-avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: formatMessage(msg.text)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === \"Enter\" && sendMessage(input),\n          placeholder: \"Type your message here...\",\n          disabled: isTyping // Disable input while typing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(input),\n          disabled: isTyping,\n          children: isTyping ? \"Typing...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"achievement-tracker\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Achievements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No achievements yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 32\n      }, this) : badges.map((badge, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge\",\n        children: [\"\\uD83C\\uDFC6 \", badge]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"ZMHI+j6120hsjGPvGG6Gw8VbNqw=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","allPredefinedQuestions","messages","setMessages","sender","text","typeOutMessage","input","setInput","predefinedQuestions","setPredefinedQuestions","setAskedQuestions","badges","setBadges","isTyping","setIsTyping","messagesEndRef","inputRef","console","time","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","question","then","timeEnd","catch","_messagesEndRef$curre","current","scrollIntoView","behavior","dots","index","interval","setInterval","prev","newMessages","length","clearInterval","getRandomQuestions","excludedQuestions","availableQuestions","filter","q","includes","shuffled","sort","Math","random","slice","sendMessage","messageText","trim","document","querySelectorAll","forEach","btn","innerText","classList","add","setTimeout","newAsked","remove","checkAchievements","_response$data","_response$data$answer","API_URL","response","post","botResponse","data","answers","answer","error","_inputRef$current","focus","fullMessage","Promise","resolve","currentText","push","questionCount","newBadges","formatMessage","split","map","part","match","href","target","rel","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","msg","src","alt","ref","type","value","onChange","e","onKeyPress","key","placeholder","badge","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Import external CSS\r\n\r\nfunction Chatbot() {\r\n  const allPredefinedQuestions = useMemo(\r\n    () => [\r\n      \"Who are you?\",\r\n      \"What can you do?\",\r\n      \"Do you know a joke?\",\r\n      \"Where do you live?\",\r\n      \"How can I contact you?\",\r\n      \"What is your favorite book?\",\r\n      \"Have you worked on any cool projects?\",\r\n      \"What are your hobbies?\",\r\n      \"Do you know any fun fact?\",\r\n      \"How would you describe yourself?\",\r\n      \"How does your CV look like?\"\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\" }\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    typeOutMessage(\"Hello and welcome! See me Fredrik's alter ego. Ask me anything and I'll do my best to answer.\");\r\n  }, []);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\r\n  const [, setAskedQuestions] = useState([]);\r\n  const [badges, setBadges] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\r\n\r\n  // Ref for auto-scrolling\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // See if this will make the first request faster.\r\n  useEffect(() => {\r\n    console.time(\"API Warm-up Time\");\r\n    \r\n    fetch(process.env.REACT_APP_API_URL, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ question: \"ping\" })\r\n    })\r\n      .then(() => console.timeEnd(\"API Warm-up Time\"))\r\n      .catch(() => console.timeEnd(\"API Warm-up Time\")); // Ensure timer stops even if there's an error\r\n  }, []); // <-- Empty dependency array ensures this runs only once\r\n  \r\n  // Scroll to bottom whenever messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (isTyping) {\r\n      let dots = [\".\", \"..\", \"...\"];\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        setMessages((prev) => {\r\n          const newMessages = [...prev];\r\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n            newMessages[newMessages.length - 1].text = dots[index];\r\n          }\r\n          return newMessages;\r\n        });\r\n        index = (index + 1) % dots.length;\r\n      }, 500);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isTyping]);\r\n\r\n  const getRandomQuestions = useCallback(\r\n    (excludedQuestions) => {\r\n      const availableQuestions = allPredefinedQuestions.filter(\r\n        (q) => !excludedQuestions.includes(q)\r\n      );\r\n      const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 3);\r\n    },\r\n    [allPredefinedQuestions]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPredefinedQuestions(getRandomQuestions([]));\r\n  }, [getRandomQuestions]);\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim() || isTyping) return;\r\n  \r\n    setIsTyping(true); // Disable input until bot finishes responding\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: messageText }, { sender: \"bot\", text: \".\" }]);\r\n    setInput(\"\");\r\n\r\n    // Check if message contains \"?\" to count it as a question\r\n    if (messageText.includes(\"?\")) {\r\n      document.querySelectorAll(\".question-button\").forEach((btn) => {\r\n        if (btn.innerText === messageText) {\r\n          btn.classList.add(\"fade-out\"); // Apply fade-out effect\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => {\r\n        setAskedQuestions((prev) => {\r\n          const newAsked = [...prev, messageText];\r\n  \r\n          // Clear animation classes before updating questions\r\n          document.querySelectorAll(\".question-button\").forEach((btn) => {\r\n            btn.classList.remove(\"fade-out\", \"fade-in\");\r\n          });\r\n  \r\n          // Update predefined questions after fade-out completes\r\n          setPredefinedQuestions(getRandomQuestions(newAsked));\r\n  \r\n          checkAchievements(newAsked.length);\r\n          return newAsked;\r\n        });\r\n  \r\n        // Delay to ensure new elements are rendered before adding fade-in effect\r\n        setTimeout(() => {\r\n          document.querySelectorAll(\".question-button\").forEach((btn) => {\r\n            btn.classList.add(\"fade-in\");\r\n          });\r\n        }, 10); // Tiny delay to ensure new buttons exist before adding class\r\n      }, 500); // Wait 0.5s for fade-out effect\r\n    }\r\n  \r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL;\r\n      const response = await axios.post(API_URL, { question: messageText });\r\n  \r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n      if (typeof response.data === \"string\") {\r\n        botResponse = response.data;\r\n      } else if (response.data?.answers?.length > 0) {\r\n        botResponse = response.data.answers[0].answer;\r\n      }\r\n      setIsTyping(false); // Re-enable input after bot response\r\n      await typeOutMessage(botResponse);\r\n    } catch (error) {\r\n      setIsTyping(false); // Re-enable input after bot response\r\n      console.error(\"Error sending message:\", error);\r\n      await typeOutMessage(\"Sorry, something went wrong.\");\r\n    }\r\n  \r\n    \r\n\r\n    // Focus back to input field\r\n    setTimeout(() => inputRef.current?.focus(), 10);\r\n  };\r\n  \r\n  const typeOutMessage = (fullMessage) => {\r\n    return new Promise((resolve) => {\r\n      let currentText = \"\";\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < fullMessage.length) {\r\n          currentText += fullMessage[index];\r\n          setMessages((prev) => {\r\n            const newMessages = [...prev];\r\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n              newMessages[newMessages.length - 1].text = currentText;\r\n            } else {\r\n              newMessages.push({ sender: \"bot\", text: currentText });\r\n            }\r\n            return newMessages;\r\n          });\r\n          index++;\r\n        } else {\r\n          clearInterval(interval);\r\n          resolve(); // Resolve when typing is complete\r\n        }\r\n      }, 25);\r\n    });\r\n  };\r\n\r\n  const checkAchievements = (questionCount) => {\r\n    const newBadges = [];\r\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\r\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\r\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\r\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\r\n  };\r\n\r\n  const formatMessage = (text) => {\r\n    return text.split(/(https?:\\/\\/\\S+)/g).map((part, index) =>\r\n      part.match(/https?:\\/\\/\\S+/) ? (\r\n        <a key={index} href={part} target=\"_blank\" rel=\"noopener noreferrer\">{part}</a>\r\n      ) : (\r\n        part\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-content\">\r\n        <div className=\"predefined-questions\">\r\n          {predefinedQuestions.map((question, index) => (\r\n            <button key={index} onClick={() => sendMessage(question)} className=\"question-button\" disabled={isTyping}>\r\n              {question}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-window\">\r\n          <div className=\"chat-messages\">\r\n          {messages.map((msg, index) => (\r\n            <div key={index} className={`message ${msg.sender}`}>\r\n              {msg.sender === \"bot\" && (\r\n                <img \r\n                  src=\"/Fredrik.jpg\" \r\n                  alt=\"Bot Avatar\" \r\n                  className=\"bot-avatar\" \r\n                />\r\n              )}\r\n              <div>{formatMessage(msg.text)}</div>\r\n              </div>\r\n          ))}\r\n            <div ref={messagesEndRef} /> {/* Invisible div to scroll to */}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <input\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n            placeholder=\"Type your message here...\"\r\n            disabled={isTyping} // Disable input while typing\r\n          />\r\n          <button onClick={() => sendMessage(input)} disabled={isTyping}>\r\n            {isTyping ? \"Typing...\" : \"Send\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"achievement-tracker\">\r\n        <h3>Achievements</h3>\r\n        {badges.length === 0 ? <p>No achievements yet.</p> :\r\n          badges.map((badge, index) => <div key={index} className=\"badge\">🏆 {badge}</div>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}