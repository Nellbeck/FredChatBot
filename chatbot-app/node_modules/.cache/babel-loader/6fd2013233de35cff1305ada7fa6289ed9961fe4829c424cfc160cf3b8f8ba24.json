{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const predefinedQuestions = [\"Who are you?\", \"What can you do?\", \"Tell me a joke!\", \"Where do you live?\", \"How can I contact you?\"];\n  const sendMessage = async messageText => {\n    if (!messageText.trim()) return;\n    const userMessage = {\n      sender: 'user',\n      text: messageText\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    try {\n      var _response$data, _response$data2, _response$data2$answe, _response$data2$answe2;\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\n      console.log(\"Sending request to:\", API_URL);\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      console.log(\"API Response:\", response.data); // ✅ Debugging log\n\n      // Check for different response structures\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.answer) {\n        botResponse = response.data.answer;\n      } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && (_response$data2$answe = _response$data2.answers) !== null && _response$data2$answe !== void 0 && (_response$data2$answe2 = _response$data2$answe[0]) !== null && _response$data2$answe2 !== void 0 && _response$data2$answe2.answer) {\n        botResponse = response.data.answers[0].answer;\n      }\n      typeOutMessage(botResponse);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      typeOutMessage('Sorry, something went wrong.');\n    }\n  };\n  const typeOutMessage = fullMessage => {\n    let currentText = \"\";\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < fullMessage.length) {\n        currentText += fullMessage[index];\n        setMessages(prev => {\n          const newMessages = [...prev];\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === 'bot') {\n            newMessages[newMessages.length - 1].text = currentText;\n          } else {\n            newMessages.push({\n              sender: 'bot',\n              text: currentText\n            });\n          }\n          return newMessages;\n        });\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 50);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') sendMessage(input);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-questions\",\n      children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(question),\n        className: \"question-button\",\n        children: question\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(input),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","predefinedQuestions","sendMessage","messageText","trim","userMessage","sender","text","prev","_response$data","_response$data2","_response$data2$answe","_response$data2$answe2","API_URL","process","env","REACT_APP_API_URL","console","log","response","post","question","data","botResponse","answer","answers","typeOutMessage","error","fullMessage","currentText","index","interval","setInterval","length","newMessages","push","clearInterval","handleKeyPress","e","key","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","type","value","onChange","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css'; // Import external CSS\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const predefinedQuestions = [\r\n    \"Who are you?\",\r\n    \"What can you do?\",\r\n    \"Tell me a joke!\",\r\n    \"Where do you live?\",\r\n    \"How can I contact you?\"\r\n  ];\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n  \r\n    const userMessage = { sender: 'user', text: messageText };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput(\"\");\r\n  \r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\r\n      console.log(\"Sending request to:\", API_URL);\r\n  \r\n      const response = await axios.post(API_URL, { question: messageText });\r\n      console.log(\"API Response:\", response.data); // ✅ Debugging log\r\n  \r\n      // Check for different response structures\r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n      \r\n      if (response.data?.answer) {\r\n        botResponse = response.data.answer;\r\n      } else if (response.data?.answers?.[0]?.answer) {\r\n        botResponse = response.data.answers[0].answer;\r\n      }\r\n  \r\n      typeOutMessage(botResponse);\r\n  \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      typeOutMessage('Sorry, something went wrong.');\r\n    }\r\n  };\r\n  \r\n\r\n  const typeOutMessage = (fullMessage) => {\r\n    let currentText = \"\";\r\n    let index = 0;\r\n\r\n    const interval = setInterval(() => {\r\n      if (index < fullMessage.length) {\r\n        currentText += fullMessage[index];\r\n        setMessages(prev => {\r\n          const newMessages = [...prev];\r\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === 'bot') {\r\n            newMessages[newMessages.length - 1].text = currentText;\r\n          } else {\r\n            newMessages.push({ sender: 'bot', text: currentText });\r\n          }\r\n          return newMessages;\r\n        });\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') sendMessage(input);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"predefined-questions\">\r\n        {predefinedQuestions.map((question, index) => (\r\n          <button key={index} onClick={() => sendMessage(question)} className=\"question-button\">\r\n            {question}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat-window\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            <span>{msg.text}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message here...\"\r\n        />\r\n        <button onClick={() => sendMessage(input)}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}