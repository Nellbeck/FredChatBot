{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const allPredefinedQuestions = useMemo(() => [\"Who are you?\", \"What can you do?\", \"Do you know a joke?\", \"Where do you live?\", \"How can I contact you?\", \"What is your favorite book?\", \"Have you worked on any cool projects?\", \"What are your hobbies?\", \"Do you know any fun fact?\", \"How would you describe yourself?\", \"How does your CV look like?\"], []);\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\"\n  }]);\n  useEffect(() => {\n    typeOutMessage(\"Hello and welcome! I'm Fredrik's alter ego. Ask me anything and I'll do my best to answer.\");\n  }, []);\n  const [input, setInput] = useState(\"\");\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\n  const [, setAskedQuestions] = useState([]);\n  const [badges, setBadges] = useState([]);\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\n\n  // Ref for auto-scrolling\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom whenever messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const getRandomQuestions = useCallback(excludedQuestions => {\n    const availableQuestions = allPredefinedQuestions.filter(q => !excludedQuestions.includes(q));\n    const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n  }, [allPredefinedQuestions]);\n  useEffect(() => {\n    setPredefinedQuestions(getRandomQuestions([]));\n  }, [getRandomQuestions]);\n  const sendMessage = async messageText => {\n    if (!messageText.trim() || isTyping) return;\n    setIsTyping(true);\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: messageText\n    }]);\n    setInput(\"\");\n\n    // Check if message contains \"?\" to count it as a question\n    if (messageText.includes(\"?\")) {\n      // Start fade-out animation\n      setPredefinedQuestions(prev => prev.map(q => q === messageText ? {\n        text: q,\n        fadingOut: true\n      } : {\n        text: q,\n        fadingOut: false\n      }));\n      setTimeout(() => {\n        setAskedQuestions(prev => {\n          const newAsked = [...prev, messageText];\n\n          // Replace with new questions after fade-out\n          setPredefinedQuestions(getRandomQuestions(newAsked).map(q => ({\n            text: q,\n            fadingOut: false\n          })));\n          checkAchievements(newAsked.length);\n          return newAsked;\n        });\n      }, 500); // Wait 0.5s before replacing\n    }\n    try {\n      var _response$data, _response$data$answer;\n      const API_URL = process.env.REACT_APP_API_URL;\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if (typeof response.data === \"string\") {\n        botResponse = response.data;\n      } else if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$answer = _response$data.answers) === null || _response$data$answer === void 0 ? void 0 : _response$data$answer.length) > 0) {\n        botResponse = response.data.answers[0].answer;\n      }\n      await typeOutMessage(botResponse);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      await typeOutMessage(\"Sorry, something went wrong.\");\n    }\n    setIsTyping(false);\n  };\n  const typeOutMessage = fullMessage => {\n    return new Promise(resolve => {\n      let currentText = \"\";\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < fullMessage.length) {\n          currentText += fullMessage[index];\n          setMessages(prev => {\n            const newMessages = [...prev];\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n              newMessages[newMessages.length - 1].text = currentText;\n            } else {\n              newMessages.push({\n                sender: \"bot\",\n                text: currentText\n              });\n            }\n            return newMessages;\n          });\n          index++;\n        } else {\n          clearInterval(interval);\n          resolve(); // Resolve when typing is complete\n        }\n      }, 25);\n    });\n  };\n  const checkAchievements = questionCount => {\n    const newBadges = [];\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-questions\",\n        children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(question.text),\n          className: `question-button ${question.fadingOut ? \"fade-out\" : \"fade-in\"}`,\n          children: question.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-container ${msg.sender}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.sender}`,\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === \"Enter\" && sendMessage(input),\n          placeholder: \"Type your message here...\",\n          disabled: isTyping // Disable input while typing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(input),\n          disabled: isTyping,\n          children: isTyping ? \"Typing...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"achievement-tracker\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Achievements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No achievements yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 32\n      }, this) : badges.map((badge, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge\",\n        children: [\"\\uD83C\\uDFC6 \", badge]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"c6g0YM60A9110h0ynzFFYB5E2Ag=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","axios","jsxDEV","_jsxDEV","Chatbot","_s","allPredefinedQuestions","messages","setMessages","sender","text","typeOutMessage","input","setInput","predefinedQuestions","setPredefinedQuestions","setAskedQuestions","badges","setBadges","isTyping","setIsTyping","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","getRandomQuestions","excludedQuestions","availableQuestions","filter","q","includes","shuffled","sort","Math","random","slice","sendMessage","messageText","trim","prev","map","fadingOut","setTimeout","newAsked","checkAchievements","length","_response$data","_response$data$answer","API_URL","process","env","REACT_APP_API_URL","response","post","question","botResponse","data","answers","answer","error","console","fullMessage","Promise","resolve","currentText","index","interval","setInterval","newMessages","push","clearInterval","questionCount","newBadges","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","ref","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","badge","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Import external CSS\r\n\r\nfunction Chatbot() {\r\n  const allPredefinedQuestions = useMemo(\r\n    () => [\r\n      \"Who are you?\",\r\n      \"What can you do?\",\r\n      \"Do you know a joke?\",\r\n      \"Where do you live?\",\r\n      \"How can I contact you?\",\r\n      \"What is your favorite book?\",\r\n      \"Have you worked on any cool projects?\",\r\n      \"What are your hobbies?\",\r\n      \"Do you know any fun fact?\",\r\n      \"How would you describe yourself?\",\r\n      \"How does your CV look like?\"\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello and welcome! I'm Fredriks alter ego. Ask me anything and I'll do my best to answer.\" }\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    typeOutMessage(\"Hello and welcome! I'm Fredrik's alter ego. Ask me anything and I'll do my best to answer.\");\r\n  }, []);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\r\n  const [, setAskedQuestions] = useState([]);\r\n  const [badges, setBadges] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false); // Track if the bot is responding\r\n\r\n  // Ref for auto-scrolling\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom whenever messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const getRandomQuestions = useCallback(\r\n    (excludedQuestions) => {\r\n      const availableQuestions = allPredefinedQuestions.filter(\r\n        (q) => !excludedQuestions.includes(q)\r\n      );\r\n      const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 3);\r\n    },\r\n    [allPredefinedQuestions]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setPredefinedQuestions(getRandomQuestions([]));\r\n  }, [getRandomQuestions]);\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim() || isTyping) return;\r\n  \r\n    setIsTyping(true);\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: messageText }]);\r\n    setInput(\"\");\r\n  \r\n    // Check if message contains \"?\" to count it as a question\r\n    if (messageText.includes(\"?\")) {\r\n      // Start fade-out animation\r\n      setPredefinedQuestions((prev) =>\r\n        prev.map((q) => (q === messageText ? { text: q, fadingOut: true } : { text: q, fadingOut: false }))\r\n      );\r\n  \r\n      setTimeout(() => {\r\n        setAskedQuestions((prev) => {\r\n          const newAsked = [...prev, messageText];\r\n  \r\n          // Replace with new questions after fade-out\r\n          setPredefinedQuestions(getRandomQuestions(newAsked).map((q) => ({ text: q, fadingOut: false })));\r\n          checkAchievements(newAsked.length);\r\n          return newAsked;\r\n        });\r\n      }, 500); // Wait 0.5s before replacing\r\n    }\r\n  \r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL;\r\n      const response = await axios.post(API_URL, { question: messageText });\r\n  \r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n      if (typeof response.data === \"string\") {\r\n        botResponse = response.data;\r\n      } else if (response.data?.answers?.length > 0) {\r\n        botResponse = response.data.answers[0].answer;\r\n      }\r\n  \r\n      await typeOutMessage(botResponse);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      await typeOutMessage(\"Sorry, something went wrong.\");\r\n    }\r\n  \r\n    setIsTyping(false);\r\n  };\r\n  \r\n  \r\n  const typeOutMessage = (fullMessage) => {\r\n    return new Promise((resolve) => {\r\n      let currentText = \"\";\r\n      let index = 0;\r\n      const interval = setInterval(() => {\r\n        if (index < fullMessage.length) {\r\n          currentText += fullMessage[index];\r\n          setMessages((prev) => {\r\n            const newMessages = [...prev];\r\n            if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n              newMessages[newMessages.length - 1].text = currentText;\r\n            } else {\r\n              newMessages.push({ sender: \"bot\", text: currentText });\r\n            }\r\n            return newMessages;\r\n          });\r\n          index++;\r\n        } else {\r\n          clearInterval(interval);\r\n          resolve(); // Resolve when typing is complete\r\n        }\r\n      }, 25);\r\n    });\r\n  };\r\n\r\n  const checkAchievements = (questionCount) => {\r\n    const newBadges = [];\r\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\r\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\r\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\r\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-content\">\r\n        <div className=\"predefined-questions\">\r\n    {predefinedQuestions.map((question, index) => (\r\n      <button\r\n        key={index}\r\n        onClick={() => sendMessage(question.text)}\r\n        className={`question-button ${question.fadingOut ? \"fade-out\" : \"fade-in\"}`}\r\n      >\r\n        {question.text}\r\n      </button>\r\n    ))}\r\n  </div>\r\n\r\n        <div className=\"chat-window\">\r\n          <div className=\"chat-messages\">\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={`message-container ${msg.sender}`}>\r\n                <div className={`message ${msg.sender}`}>{msg.text}</div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} /> {/* Invisible div to scroll to */}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n            placeholder=\"Type your message here...\"\r\n            disabled={isTyping} // Disable input while typing\r\n          />\r\n          <button onClick={() => sendMessage(input)} disabled={isTyping}>\r\n            {isTyping ? \"Typing...\" : \"Send\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"achievement-tracker\">\r\n        <h3>Achievements</h3>\r\n        {badges.length === 0 ? <p>No achievements yet.</p> :\r\n          badges.map((badge, index) => <div key={index} className=\"badge\">🏆 {badge}</div>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAChF,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,sBAAsB,GAAGP,OAAO,CACpC,MAAM,CACJ,cAAc,EACd,kBAAkB,EAClB,qBAAqB,EACrB,oBAAoB,EACpB,wBAAwB,EACxB,6BAA6B,EAC7B,uCAAuC,EACvC,wBAAwB,EACxB,2BAA2B,EAC3B,kCAAkC,EAClC,6BAA6B,CAC9B,EACD,EACF,CAAC;EAED,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CACvC;IAAEa,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAA4F,CAAC,CACrH,CAAC;EAEFb,SAAS,CAAC,MAAM;IACdc,cAAc,CAAC,4FAA4F,CAAC;EAC9G,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,GAAGoB,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAMyB,cAAc,GAAGrB,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAH,SAAS,CAAC,MAAM;IAAA,IAAAyB,qBAAA;IACd,CAAAA,qBAAA,GAAAD,cAAc,CAACE,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,MAAMmB,kBAAkB,GAAG5B,WAAW,CACnC6B,iBAAiB,IAAK;IACrB,MAAMC,kBAAkB,GAAGtB,sBAAsB,CAACuB,MAAM,CACrDC,CAAC,IAAK,CAACH,iBAAiB,CAACI,QAAQ,CAACD,CAAC,CACtC,CAAC;IACD,MAAME,QAAQ,GAAGJ,kBAAkB,CAACK,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACnE,OAAOH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7B,CAAC,EACD,CAAC9B,sBAAsB,CACzB,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdkB,sBAAsB,CAACW,kBAAkB,CAAC,EAAE,CAAC,CAAC;EAChD,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,MAAMW,WAAW,GAAG,MAAOC,WAAW,IAAK;IACzC,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC,IAAIpB,QAAQ,EAAE;IAErCC,WAAW,CAAC,IAAI,CAAC;IACjBZ,WAAW,CAAEgC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAE/B,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAE4B;IAAY,CAAC,CAAC,CAAC;IACvEzB,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACA,IAAIyB,WAAW,CAACP,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7B;MACAhB,sBAAsB,CAAEyB,IAAI,IAC1BA,IAAI,CAACC,GAAG,CAAEX,CAAC,IAAMA,CAAC,KAAKQ,WAAW,GAAG;QAAE5B,IAAI,EAAEoB,CAAC;QAAEY,SAAS,EAAE;MAAK,CAAC,GAAG;QAAEhC,IAAI,EAAEoB,CAAC;QAAEY,SAAS,EAAE;MAAM,CAAE,CACpG,CAAC;MAEDC,UAAU,CAAC,MAAM;QACf3B,iBAAiB,CAAEwB,IAAI,IAAK;UAC1B,MAAMI,QAAQ,GAAG,CAAC,GAAGJ,IAAI,EAAEF,WAAW,CAAC;;UAEvC;UACAvB,sBAAsB,CAACW,kBAAkB,CAACkB,QAAQ,CAAC,CAACH,GAAG,CAAEX,CAAC,KAAM;YAAEpB,IAAI,EAAEoB,CAAC;YAAEY,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC,CAAC;UAChGG,iBAAiB,CAACD,QAAQ,CAACE,MAAM,CAAC;UAClC,OAAOF,QAAQ;QACjB,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX;IAEA,IAAI;MAAA,IAAAG,cAAA,EAAAC,qBAAA;MACF,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;MAC7C,MAAMC,QAAQ,GAAG,MAAMpD,KAAK,CAACqD,IAAI,CAACL,OAAO,EAAE;QAAEM,QAAQ,EAAEjB;MAAY,CAAC,CAAC;MAErE,IAAIkB,WAAW,GAAG,kCAAkC;MACpD,IAAI,OAAOH,QAAQ,CAACI,IAAI,KAAK,QAAQ,EAAE;QACrCD,WAAW,GAAGH,QAAQ,CAACI,IAAI;MAC7B,CAAC,MAAM,IAAI,EAAAV,cAAA,GAAAM,QAAQ,CAACI,IAAI,cAAAV,cAAA,wBAAAC,qBAAA,GAAbD,cAAA,CAAeW,OAAO,cAAAV,qBAAA,uBAAtBA,qBAAA,CAAwBF,MAAM,IAAG,CAAC,EAAE;QAC7CU,WAAW,GAAGH,QAAQ,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM;MAC/C;MAEA,MAAMhD,cAAc,CAAC6C,WAAW,CAAC;IACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMjD,cAAc,CAAC,8BAA8B,CAAC;IACtD;IAEAS,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAGD,MAAMT,cAAc,GAAImD,WAAW,IAAK;IACtC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9B,IAAIC,WAAW,GAAG,EAAE;MACpB,IAAIC,KAAK,GAAG,CAAC;MACb,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIF,KAAK,GAAGJ,WAAW,CAAChB,MAAM,EAAE;UAC9BmB,WAAW,IAAIH,WAAW,CAACI,KAAK,CAAC;UACjC1D,WAAW,CAAEgC,IAAI,IAAK;YACpB,MAAM6B,WAAW,GAAG,CAAC,GAAG7B,IAAI,CAAC;YAC7B,IAAI6B,WAAW,CAACvB,MAAM,GAAG,CAAC,IAAIuB,WAAW,CAACA,WAAW,CAACvB,MAAM,GAAG,CAAC,CAAC,CAACrC,MAAM,KAAK,KAAK,EAAE;cAClF4D,WAAW,CAACA,WAAW,CAACvB,MAAM,GAAG,CAAC,CAAC,CAACpC,IAAI,GAAGuD,WAAW;YACxD,CAAC,MAAM;cACLI,WAAW,CAACC,IAAI,CAAC;gBAAE7D,MAAM,EAAE,KAAK;gBAAEC,IAAI,EAAEuD;cAAY,CAAC,CAAC;YACxD;YACA,OAAOI,WAAW;UACpB,CAAC,CAAC;UACFH,KAAK,EAAE;QACT,CAAC,MAAM;UACLK,aAAa,CAACJ,QAAQ,CAAC;UACvBH,OAAO,CAAC,CAAC,CAAC,CAAC;QACb;MACF,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMnB,iBAAiB,GAAI2B,aAAa,IAAK;IAC3C,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAID,aAAa,IAAI,CAAC,IAAI,CAACvD,MAAM,CAACc,QAAQ,CAAC,iBAAiB,CAAC,EAAE0C,SAAS,CAACH,IAAI,CAAC,iBAAiB,CAAC;IAChG,IAAIE,aAAa,IAAI,CAAC,IAAI,CAACvD,MAAM,CAACc,QAAQ,CAAC,iBAAiB,CAAC,EAAE0C,SAAS,CAACH,IAAI,CAAC,iBAAiB,CAAC;IAChG,IAAIE,aAAa,IAAI,EAAE,IAAI,CAACvD,MAAM,CAACc,QAAQ,CAAC,gBAAgB,CAAC,EAAE0C,SAAS,CAACH,IAAI,CAAC,gBAAgB,CAAC;IAC/F,IAAIG,SAAS,CAAC3B,MAAM,GAAG,CAAC,EAAE5B,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAE,GAAGwD,SAAS,CAAC,CAAC;EAChE,CAAC;EAED,oBACEtE,OAAA;IAAKuE,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCxE,OAAA;MAAKuE,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BxE,OAAA;QAAKuE,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EACxC7D,mBAAmB,CAAC2B,GAAG,CAAC,CAACc,QAAQ,EAAEW,KAAK,kBACvC/D,OAAA;UAEEyE,OAAO,EAAEA,CAAA,KAAMvC,WAAW,CAACkB,QAAQ,CAAC7C,IAAI,CAAE;UAC1CgE,SAAS,EAAE,mBAAmBnB,QAAQ,CAACb,SAAS,GAAG,UAAU,GAAG,SAAS,EAAG;UAAAiC,QAAA,EAE3EpB,QAAQ,CAAC7C;QAAI,GAJTwD,KAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKJ,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEA7E,OAAA;QAAKuE,SAAS,EAAC,aAAa;QAAAC,QAAA,eAC1BxE,OAAA;UAAKuE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAC3BpE,QAAQ,CAACkC,GAAG,CAAC,CAACwC,GAAG,EAAEf,KAAK,kBACvB/D,OAAA;YAAiBuE,SAAS,EAAE,qBAAqBO,GAAG,CAACxE,MAAM,EAAG;YAAAkE,QAAA,eAC5DxE,OAAA;cAAKuE,SAAS,EAAE,WAAWO,GAAG,CAACxE,MAAM,EAAG;cAAAkE,QAAA,EAAEM,GAAG,CAACvE;YAAI;cAAAmE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC,GADjDd,KAAK;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACN,CAAC,eACF7E,OAAA;YAAK+E,GAAG,EAAE7D;UAAe;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN7E,OAAA;QAAKuE,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BxE,OAAA;UACEgF,IAAI,EAAC,MAAM;UACXC,KAAK,EAAExE,KAAM;UACbyE,QAAQ,EAAGC,CAAC,IAAKzE,QAAQ,CAACyE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC1CI,UAAU,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIpD,WAAW,CAACzB,KAAK,CAAE;UAC3D8E,WAAW,EAAC,2BAA2B;UACvCC,QAAQ,EAAExE,QAAS,CAAC;QAAA;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF7E,OAAA;UAAQyE,OAAO,EAAEA,CAAA,KAAMvC,WAAW,CAACzB,KAAK,CAAE;UAAC+E,QAAQ,EAAExE,QAAS;UAAAwD,QAAA,EAC3DxD,QAAQ,GAAG,WAAW,GAAG;QAAM;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN7E,OAAA;MAAKuE,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCxE,OAAA;QAAAwE,QAAA,EAAI;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpB/D,MAAM,CAAC6B,MAAM,KAAK,CAAC,gBAAG3C,OAAA;QAAAwE,QAAA,EAAG;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAChD/D,MAAM,CAACwB,GAAG,CAAC,CAACmD,KAAK,EAAE1B,KAAK,kBAAK/D,OAAA;QAAiBuE,SAAS,EAAC,OAAO;QAAAC,QAAA,GAAC,eAAG,EAACiB,KAAK;MAAA,GAAlC1B,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEhF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3E,EAAA,CAxLQD,OAAO;AAAAyF,EAAA,GAAPzF,OAAO;AA0LhB,eAAeA,OAAO;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}