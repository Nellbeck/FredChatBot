{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fogge\\\\source\\\\repos\\\\ChatBot\\\\chatbot-app\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Import external CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const allPredefinedQuestions = useMemo(() => [\"Who are you?\", \"What can you do?\", \"Tell me a joke!\", \"Where do you live?\", \"How can I contact you?\", \"What's your favorite color?\", \"What's the weather like?\", \"Can you give me advice?\", \"Tell me a fun fact!\", \"Do you like pizza?\"], []);\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\n  const [askedQuestions, setAskedQuestions] = useState([]);\n  const [badges, setBadges] = useState([]);\n  useEffect(() => {\n    setPredefinedQuestions(getRandomQuestions([]));\n  }, []);\n  const getRandomQuestions = useCallback(excludedQuestions => {\n    const availableQuestions = allPredefinedQuestions.filter(q => !excludedQuestions.includes(q));\n    const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n  }, [allPredefinedQuestions]);\n  const sendMessage = async messageText => {\n    if (!messageText.trim()) return;\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: messageText\n    }]);\n    setInput(\"\");\n    setAskedQuestions(prev => {\n      const newAsked = [...prev, messageText];\n      setPredefinedQuestions(getRandomQuestions(newAsked));\n      checkAchievements(newAsked.length);\n      return newAsked;\n    });\n    try {\n      var _response$data, _response$data$answer;\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\n      const response = await axios.post(API_URL, {\n        question: messageText\n      });\n      let botResponse = \"Sorry, I didn't understand that.\";\n      if (typeof response.data === \"string\") {\n        botResponse = response.data;\n      } else if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$answer = _response$data.answers) === null || _response$data$answer === void 0 ? void 0 : _response$data$answer.length) > 0) {\n        botResponse = response.data.answers[0].answer;\n      }\n      typeOutMessage(botResponse);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      typeOutMessage(\"Sorry, something went wrong.\");\n    }\n  };\n  const typeOutMessage = fullMessage => {\n    let currentText = \"\";\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < fullMessage.length) {\n        currentText += fullMessage[index];\n        setMessages(prev => {\n          const newMessages = [...prev];\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\n            newMessages[newMessages.length - 1].text = currentText;\n          } else {\n            newMessages.push({\n              sender: \"bot\",\n              text: currentText\n            });\n          }\n          return newMessages;\n        });\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 50);\n  };\n  const checkAchievements = questionCount => {\n    const newBadges = [];\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-questions\",\n        children: predefinedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(question),\n          className: \"question-button\",\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-container ${msg.sender}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.sender}`,\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => e.key === \"Enter\" && sendMessage(input),\n          placeholder: \"Type your message here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(input),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"achievement-tracker\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Achievements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), badges.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No achievements yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 32\n      }, this) : badges.map((badge, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge\",\n        children: [\"\\uD83C\\uDFC6 \", badge]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 40\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"otj60Ps888f6NIZx6A/sPF6vfI8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","axios","jsxDEV","_jsxDEV","Chatbot","_s","allPredefinedQuestions","messages","setMessages","sender","text","input","setInput","predefinedQuestions","setPredefinedQuestions","askedQuestions","setAskedQuestions","badges","setBadges","getRandomQuestions","excludedQuestions","availableQuestions","filter","q","includes","shuffled","sort","Math","random","slice","sendMessage","messageText","trim","prev","newAsked","checkAchievements","length","_response$data","_response$data$answer","API_URL","process","env","REACT_APP_API_URL","response","post","question","botResponse","data","answers","answer","typeOutMessage","error","console","fullMessage","currentText","index","interval","setInterval","newMessages","push","clearInterval","questionCount","newBadges","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","type","value","onChange","e","target","onKeyPress","key","placeholder","badge","_c","$RefreshReg$"],"sources":["C:/Users/Fogge/source/repos/ChatBot/chatbot-app/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Import external CSS\r\n\r\n\r\n\r\nfunction Chatbot() {\r\n  const allPredefinedQuestions = useMemo(\r\n    () => [\r\n      \"Who are you?\",\r\n      \"What can you do?\",\r\n      \"Tell me a joke!\",\r\n      \"Where do you live?\",\r\n      \"How can I contact you?\",\r\n      \"What's your favorite color?\",\r\n      \"What's the weather like?\",\r\n      \"Can you give me advice?\",\r\n      \"Tell me a fun fact!\",\r\n      \"Do you like pizza?\"\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [predefinedQuestions, setPredefinedQuestions] = useState([]);\r\n  const [askedQuestions, setAskedQuestions] = useState([]);\r\n  const [badges, setBadges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setPredefinedQuestions(getRandomQuestions([]));\r\n  }, []);\r\n\r\n\r\n  const getRandomQuestions = useCallback(\r\n    (excludedQuestions) => {\r\n      const availableQuestions = allPredefinedQuestions.filter(\r\n        (q) => !excludedQuestions.includes(q)\r\n      );\r\n      const shuffled = availableQuestions.sort(() => 0.5 - Math.random());\r\n      return shuffled.slice(0, 3);\r\n    },\r\n    [allPredefinedQuestions]\r\n  );\r\n\r\n  const sendMessage = async (messageText) => {\r\n    if (!messageText.trim()) return;\r\n\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: messageText }]);\r\n    setInput(\"\");\r\n    setAskedQuestions((prev) => {\r\n      const newAsked = [...prev, messageText];\r\n      setPredefinedQuestions(getRandomQuestions(newAsked));\r\n      checkAchievements(newAsked.length);\r\n      return newAsked;\r\n    });\r\n\r\n    try {\r\n      const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:7071/api/qna\";\r\n      const response = await axios.post(API_URL, { question: messageText });\r\n\r\n      let botResponse = \"Sorry, I didn't understand that.\";\r\n      if (typeof response.data === \"string\") {\r\n        botResponse = response.data;\r\n      } else if (response.data?.answers?.length > 0) {\r\n        botResponse = response.data.answers[0].answer;\r\n      }\r\n\r\n      typeOutMessage(botResponse);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      typeOutMessage(\"Sorry, something went wrong.\");\r\n    }\r\n  };\r\n\r\n  const typeOutMessage = (fullMessage) => {\r\n    let currentText = \"\";\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < fullMessage.length) {\r\n        currentText += fullMessage[index];\r\n        setMessages((prev) => {\r\n          const newMessages = [...prev];\r\n          if (newMessages.length > 0 && newMessages[newMessages.length - 1].sender === \"bot\") {\r\n            newMessages[newMessages.length - 1].text = currentText;\r\n          } else {\r\n            newMessages.push({ sender: \"bot\", text: currentText });\r\n          }\r\n          return newMessages;\r\n        });\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  const checkAchievements = (questionCount) => {\r\n    const newBadges = [];\r\n    if (questionCount >= 1 && !badges.includes(\"First Question!\")) newBadges.push(\"First Question!\");\r\n    if (questionCount >= 5 && !badges.includes(\"Five Questions!\")) newBadges.push(\"Five Questions!\");\r\n    if (questionCount >= 10 && !badges.includes(\"Ten Questions!\")) newBadges.push(\"Ten Questions!\");\r\n    if (newBadges.length > 0) setBadges([...badges, ...newBadges]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-content\">\r\n        <div className=\"predefined-questions\">\r\n          {predefinedQuestions.map((question, index) => (\r\n            <button key={index} onClick={() => sendMessage(question)} className=\"question-button\">\r\n              {question}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-window\">\r\n          <div className=\"chat-messages\">\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={`message-container ${msg.sender}`}>\r\n                <div className={`message ${msg.sender}`}>{msg.text}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n            placeholder=\"Type your message here...\"\r\n          />\r\n          <button onClick={() => sendMessage(input)}>Send</button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"achievement-tracker\">\r\n        <h3>Achievements</h3>\r\n        {badges.length === 0 ? <p>No achievements yet.</p> :\r\n          badges.map((badge, index) => <div key={index} className=\"badge\">🏆 {badge}</div>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}